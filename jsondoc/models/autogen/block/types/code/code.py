# generated by datamodel-codegen:
#   filename:  example.json
#   timestamp: 2024-08-15T07:20:03+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import AwareDatetime, BaseModel, ConfigDict
from typing_extensions import Literal


class Parent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: str
    block_id: Optional[str] = None
    page_id: Optional[str] = None


class CreatedBy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    object: Literal['user']
    id: str


class LastEditedBy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    object: Literal['user']
    id: str


class Type(Enum):
    text = 'text'
    equation = 'equation'


class CaptionItem(BaseModel):
    type: Type


class RichTextItem(BaseModel):
    type: Type


class Language(Enum):
    abap = 'abap'
    arduino = 'arduino'
    bash = 'bash'
    basic = 'basic'
    c = 'c'
    clojure = 'clojure'
    coffeescript = 'coffeescript'
    c__ = 'c++'
    c_ = 'c#'
    css = 'css'
    dart = 'dart'
    diff = 'diff'
    docker = 'docker'
    elixir = 'elixir'
    elm = 'elm'
    erlang = 'erlang'
    flow = 'flow'
    fortran = 'fortran'
    f_ = 'f#'
    gherkin = 'gherkin'
    glsl = 'glsl'
    go = 'go'
    graphql = 'graphql'
    groovy = 'groovy'
    haskell = 'haskell'
    html = 'html'
    java = 'java'
    javascript = 'javascript'
    json = 'json'
    julia = 'julia'
    kotlin = 'kotlin'
    latex = 'latex'
    less = 'less'
    lisp = 'lisp'
    livescript = 'livescript'
    lua = 'lua'
    makefile = 'makefile'
    markdown = 'markdown'
    markup = 'markup'
    matlab = 'matlab'
    mermaid = 'mermaid'
    nix = 'nix'
    objective_c = 'objective-c'
    ocaml = 'ocaml'
    pascal = 'pascal'
    perl = 'perl'
    php = 'php'
    plain_text = 'plain text'
    powershell = 'powershell'
    prolog = 'prolog'
    protobuf = 'protobuf'
    python = 'python'
    r = 'r'
    reason = 'reason'
    ruby = 'ruby'
    rust = 'rust'
    sass = 'sass'
    scala = 'scala'
    scheme = 'scheme'
    scss = 'scss'
    shell = 'shell'
    sql = 'sql'
    swift = 'swift'
    typescript = 'typescript'
    vb_net = 'vb.net'
    verilog = 'verilog'
    vhdl = 'vhdl'
    visual_basic = 'visual basic'
    webassembly = 'webassembly'
    xml = 'xml'
    yaml = 'yaml'
    java_c_c___c_ = 'java/c/c++/c#'


class Type2(Enum):
    paragraph = 'paragraph'
    to_do = 'to_do'
    bulleted_list_item = 'bulleted_list_item'
    numbered_list_item = 'numbered_list_item'
    code = 'code'
    column = 'column'
    column_list = 'column_list'
    divider = 'divider'
    equation = 'equation'
    heading_1 = 'heading_1'
    heading_2 = 'heading_2'
    heading_3 = 'heading_3'
    image = 'image'
    quote = 'quote'
    equation_1 = 'equation'
    table = 'table'
    table_row = 'table_row'
    toggle = 'toggle'


class Child(BaseModel):
    type: Type2


class Code(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    caption: Optional[List[CaptionItem]] = None
    rich_text: List[RichTextItem]
    language: Optional[Language] = None
    children: Optional[List[Child]] = None


class CodeBlock(BaseModel):
    object: Literal['block']
    id: str
    parent: Optional[Parent] = None
    type: str
    created_time: AwareDatetime
    created_by: Optional[CreatedBy] = None
    last_edited_time: Optional[AwareDatetime] = None
    last_edited_by: Optional[LastEditedBy] = None
    archived: bool
    in_trash: Optional[bool] = None
    has_children: bool
    metadata: Optional[Dict[str, Any]] = None
    code: Code
