# generated by datamodel-codegen:
#   filename:  example.json
#   timestamp: 2024-09-10T15:45:21+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from jsondoc.models.block.base import BlockBase
from jsondoc.models.block.types.rich_text.text import RichTextText
from pydantic import AwareDatetime, BaseModel, ConfigDict
from typing_extensions import Literal


class Parent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: str
    page_id: Optional[str] = None


class CreatedBy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    object: Literal['user'] = 'user'
    id: str


class LastEditedBy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    object: Literal['user'] = 'user'
    id: str


class Type(Enum):
    emoji = 'emoji'


class Icon(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type
    emoji: str


class Title(BaseModel):
    model_config = ConfigDict(
        arbitrary_types_allowed=True,
    )
    id: Optional[str] = None
    type: Literal['title'] = 'title'
    title: Optional[List[RichTextText]] = None


class Properties(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    title: Optional[Title] = None


class Page(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        arbitrary_types_allowed=True,
    )
    object: Literal['page'] = 'page'
    id: str
    parent: Optional[Parent] = None
    created_time: AwareDatetime
    created_by: Optional[CreatedBy] = None
    last_edited_time: Optional[AwareDatetime] = None
    last_edited_by: Optional[LastEditedBy] = None
    icon: Optional[Icon] = None
    archived: Optional[bool] = None
    in_trash: Optional[bool] = None
    properties: Properties
    children: List[BlockBase]
